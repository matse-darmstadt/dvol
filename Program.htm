<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8"></meta>
	<title>dvol</title>
</head>
<body>
	<script type="text/javascript">
	
		var AIR = 'AIR';
		
		var CHEESE = 'CHEESE';
	
		/// @class Cheese
		/// @brief Represents a cheese which is made of cheese- and air-segments.
		///
		/// @param structure
		/// @brief A threedimensional array like this:
		///		[ <-- The cheese array, which holds the z-layers
		///			[ <-- A z-layer Z: 0
		///				[ false, true, true ], <-- X: 0 - 2, Y: 0
		///				[ true, false, false ], <-- X: 0 - 2, Y: 1
		///				[ true, true, true ]  <-- X: 0 - 2, Y: 2
		///			],
		///			[ <-- Z: 1
		///				[ false, false, true ],
		///				[ true, false, false ],
		///				[ true, false, true ]
		///			],
		///			[ <-- Z: 2
		///				[ false, false, true ],
		///				[ true, false, false ],
		///				[ true, false, true ]
		///			]
		///		]
		///		
		/// 	true -> cheese
		/// 	false -> air
		/// 	
		///		Access:
		///			array[z][y][x] = true | false
		(Cheese = function (structure) {
			
			this.structure = this.parseBooleanStructure(structure);
			
		}).prototype = {
		
			structure: null,
			
			/// @fn parseBooleanStructure
			/// @brief Parses a threedimensional array (see structure-param of Cheese-class) into an array which holds air- or cheese-segments.
			///
			/// @param structure
			/// @brief see structure-param of Cheese-class.
			///
			/// @return Array
			/// @brief A threedimensional array which contains the cheese- and air-segments.
			parseBooleanStructure: function (structure) {
			
				for (var zIndex = 0; zIndex < structure.length; zIndex++)
				
					for (var yIndex = 0; yIndex < structure[zIndex].length; yIndex++)
					
						for (var xIndex = 0; xIndex < structure[zIndex][yIndex].length; xIndex++)
						
							structure[zIndex][yIndex][xIndex] = structure[zIndex][yIndex][xIndex] ? {
								type: CHEESE
							} : {
								type: AIR
							};
			
				return structure;
			
			}
			
			/// @fn pour
			/// @brief Simulates a water flow from a start position. The given coordinates have to point to an air-segment at the surface of the cheese.
			/// 
			/// @param z
			/// @brief The z coordinate where the water flows into the cheese.
			/// 
			/// @param x
			/// @brief The x coordinate where the water flows into the cheese.
			///
			/// @return Boolean
			/// @brief Indicates whether the water flew through the cheese or not.
			pour: function (z, x) {
					
				this.step(z, 0, x);
				
			}
			
			/// @fn step
			/// @brief Represents a step in the simulation.
			step: function (z, y, x) {
				
				this.structure[z][y][x].visited = true;
			
				var diversions = this.getDiversions(z, y, x);
				
				for (var index = 0; index < diversions.length; index++)
				
					this.step.apply(this, diversions[index]);
			
			}
			
			/// @fn getDiversions
			/// @brief Returns the possible directions from a specific coordinate, where water can flow.
			/// 
			/// @param z
			/// @brief The z coordinate from where the water comes.
			/// 
			/// @param y
			/// @brief The y coordinate from where the water comes.
			/// 
			/// @param x
			/// @brief The x coordinate from where the water comes.
			///
			/// @return Array
			/// @brief An array of coordinates where the water can flow.
			getDiversions: function (z, y, x) {
			
				var diversions = [];
				
				for (var i = 0; i < 6; i++) {
				
					var pos = i >> 1;
					
					var factor = 1 - 2 * (i & 1);
					
					var dy = pos % 2;
					
					var dz = pos >> 1;
					
					var _x = x + (dy | dz) * -factor;
					
					var _y = y + dy * factor;
					
					var _z = z + dz * factor;
					
					if (this.structure[_z][_y][_x].type == AIR)
						diversions.push([_z, _y, _x]);
				
				}
			
				return diversions;
			
			}
			
		};
		
	</script>
</body>
</html>
